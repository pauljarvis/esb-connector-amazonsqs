<?xml version="1.0" encoding="utf-8"?>
<!--
 ~  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~  WSO2 Inc. licenses this file to you under the Apache License,
 ~  Version 2.0 (the "License"); you may not use this file except
 ~  in compliance with the License.
 ~  You may obtain a copy of the License at
 ~
 ~    http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~  Unless required by applicable law or agreed to in writing,
 ~  software distributed under the License is distributed on an
 ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~  KIND, either express or implied.  See the License for the
 ~  specific language governing permissions and limitations
 ~  under the License.
-->
<template name="init" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="accessKeyId"
               description="The access key ID that corresponds to the secret access key that you used to sign the request"/>
    <parameter name="secretAccessKey" description="The secretAccessKey"/>
    <parameter name="version" description="The API version that the request is written for"/>
    <parameter name="region" description="Region which is used select a regional endpoint to make requests"/>
    <parameter name="enableSSL" description="This uses the enabling https amazon aws URL"/>
    <parameter name="contentType" description="This is used to generate the signature"/>
    <parameter name="blocking"
               description="The blocking parameter is helping connector performs the blocking invocations to
               Amazon SQS."/>
    <sequence>
        <property name="uri.var.accessKeyId" expression="$func:accessKeyId"/>
        <property name="uri.var.secretAccessKey" expression="$func:secretAccessKey"/>
        <property name="uri.var.version" expression="$func:version"/>
        <property name="uri.var.region" expression="$func:region"/>
        <property name="uri.var.enableSSL" expression="$func:enableSSL"/>
        <!-- Common values to be used in all methods -->
        <property name="uri.var.service" value="sqs"/>
        <property name="uri.var.signatureMethod" value="HmacSHA256"/>
        <property name="uri.var.signatureVersion" value="4"/>
        <property name="uri.var.contentType" expression="$func:contentType"/>
        <property name="uri.var.httpMethod" value="POST"/>
        <property name="uri.var.terminationString" value="aws4_request"/>
        <property name="amazonSQSBlocking" expression="$func:blocking"/>
        <property name="POST_TO_URI" value="true" scope="axis2"/>
        <property name="DISABLE_CHUNKING" value="true" scope="axis2"/>
        <header name="Content-Type" scope="transport" expression="get-property('uri.var.contentType')" />
        <property name="messageType" expression="get-property('uri.var.contentType')" scope="axis2"/>
        <!--
        Need to add port 80(for amazon aws http URL) or 443(for amazon aws https URL ) to the 'hostName' property(used to create signature) to match the signature generated by API end.
         Note that ESB sends Host header with port value, hence API uses the receiving value(including port) to generate signature.
        -->
        <filter xpath="get-property('uri.var.enableSSL') = '' or  (not(string(get-property('uri.var.enableSSL'))))">
            <then>
                <property name="uri.var.hostName"
                          expression="fn:concat(get-property('uri.var.service') ,'.' , get-property('uri.var.region') , '.amazonaws.com')"/>
                <property name="uri.var.apiUrl" expression="fn:concat('http://' , get-property('uri.var.hostName'))"/>
            </then>
            <else>
                <filter xpath="get-property('uri.var.enableSSL') = 'true'">
                    <then>
                        <property name="uri.var.hostName"
                                  expression="fn:concat(get-property('uri.var.service') ,'.' , get-property('uri.var.region') , '.amazonaws.com:443')"/>
                        <property name="uri.var.apiUrl"
                                  expression="fn:concat('https://' , get-property('uri.var.hostName'))"/>
                    </then>
                    <else>
                        <property name="uri.var.hostName"
                                  expression="fn:concat(get-property('uri.var.service') ,'.' , get-property('uri.var.region') , '.amazonaws.com')"/>
                        <property name="uri.var.apiUrl"
                                  expression="fn:concat('http://' , get-property('uri.var.hostName'))"/>
                    </else>
                </filter>
            </else>
        </filter>
        <property name="REQUEST_HOST_HEADER" scope="axis2" expression="$ctx:uri.var.hostName"/>
    </sequence>
</template>
